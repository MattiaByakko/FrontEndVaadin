# Logging
logging.level.org.atmosphere=warn

# Server
server.port=8081
spring.application.name=vaadin-app

# Vaadin
vaadin.launch-browser=true
vaadin.allowed-packages=com.vaadin,org.vaadin,com.flowingcode,poc.insurance

# Database PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/claimdb
spring.datasource.username=user
spring.datasource.password=pass
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate auto-update schema (utile solo dev, non produzione!)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# OAuth2 Client (Spring Security - Browser Login via Keycloak)
spring.security.oauth2.client.registration.myclient.client-id=myclient
spring.security.oauth2.client.registration.myclient.client-secret=R8xY7O32RTzoVUIOI2feiVhekSjViHdR
spring.security.oauth2.client.registration.myclient.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.myclient.scope=openid,profile,email
spring.security.oauth2.client.registration.myclient.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

spring.security.oauth2.client.provider.myclient.issuer-uri=http://localhost:8080/realms/insurance


spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/insurance

# JWT Resource Server (per API REST protette con token JWT)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/insurance/protocol/openid-connect/certs


keycloak.admin.client-id=admin-cli
keycloak.admin.client-secret=uhTqBkCvvnXuUj9Dli43JXZKHqqKskUp
keycloak.server-url=http://localhost:8080
keycloak.realm=insurance
